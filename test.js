const { execSync } = require('child_process');
const { exec } = require('child_process');
async function fetchDomains() {
  try {
    const apiUrl = process.env.DOMAINS_API_URL;
    const apiToken = process.env.DOMAINS_API_TOKEN;

    if (!apiUrl) throw new Error('Missing DOMAINS_API_URL');

    const headers = apiToken ? { 'X-API-KEY': apiToken } : {};

    const response = await fetch(apiUrl, { headers });
    if (!response.ok) throw new Error(`API failed: ${response.status}`);

    const data = await response.json();
    const domains = data.data.map(domain => `https://${domain}`);

    if (!domains.length) throw new Error('No domains found');
    return domains;
  } catch (err) {
    console.error('Fetch error:', err.message);
    process.exit(1);
  }
}

async function runLighthouseCI() {
  const domains = await fetchDomains();
  
  console.log(`\n==================================================`);
  console.log(`üöÄ Starting parallel collection for ${domains.length} domains...`);
  console.log(`==================================================`);

  // 1. T·∫°o m·ªôt m·∫£ng c√°c "l·ªùi h·ª©a", m·ªói l·ªùi h·ª©a l√† m·ªôt l·ªánh collect
  const collectPromises = domains.map(domain => {
    return new Promise((resolve, reject) => {
      const collectCommand = `lhci collect --url=${domain} --numberOfRuns=1`;
      console.log(`Queueing: ${collectCommand}`);

      exec(collectCommand, (error, stdout, stderr) => {
        if (error) {
          console.error(`‚ùå Error collecting for ${domain}: ${stderr}`);
          resolve({ domain, status: 'failed', error: stderr });
          return;
        }
        console.log(`‚úÖ Finished collecting for ${domain}`);
        resolve({ domain, status: 'success' });
      });
    });
  });

  // 2. Ch·ªù cho T·∫§T C·∫¢ c√°c l·ªánh collect ho√†n th√†nh
  const results = await Promise.all(collectPromises);
  const successCount = results.filter(r => r.status === 'success').length;
  const errorCount = results.length - successCount;

  console.log(`\n--- Collection Complete ---`);
  console.log(`‚úÖ Success: ${successCount} | ‚ùå Failed: ${errorCount}`);

  if (successCount === 0) {
      console.log('No successful reports to upload. Exiting.');
      process.exit(1); // Tho√°t v√† b√°o l·ªói n·∫øu kh√¥ng c√≥ report n√†o th√†nh c√¥ng
  }

  // 3. Sau khi t·∫•t c·∫£ ƒë√£ collect xong, ch·∫°y upload m·ªôt l·∫ßn duy nh·∫•t
  try {
    console.log(`\n==================================================`);
    console.log(`‚òÅÔ∏è Uploading all reports to LHCI server...`);
    console.log(`==================================================`);
    // D√πng execSync ·ªü ƒë√¢y v√¨ ƒë√¢y l√† b∆∞·ªõc cu·ªëi c√πng, c·∫ßn ch·∫°y xong m·ªõi k·∫øt th√∫c
    execSync('lhci upload', { stdio: 'inherit' });
    console.log('\n‚ú® --- All tasks completed! --- ‚ú®');
  } catch (error) {
    console.error('LHCI upload failed:', error);
    process.exit(1);
  }
}

// B·∫Øt ƒë·∫ßu th·ª±c thi
runLighthouseCI();